[{
  "_id": {
    "$oid": "5908456263929828d98bdc8b"
  },
  "name": "center os 安装 node",
  "content": "### center os 安装 node\n#### 首先上官网下载最新的编译好的node\n#### 下载\n```\nwget https://nodejs.org/dist/v6.10.2/node-v6.10.2-linux-x64.tar.xz\n```\n#### 解压\n```\n xz -d node-v6.10.2-linux-x64.tar.xz\n tar -xvf node-v6.10.2-linux-x64.tar\n```\n#### 注册到全局\n``` \nln -s /home/soft/node-v6.10.2-linux-x64/bin/node /usr/local/bin/node\nln -s /home/soft/node-v6.10.2-linux-x64/bin/npm /usr/local/bin/npm\n```",
  "time": {
    "$date": "2017-04-28T16:37:11.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "590984591ae4cc44f28603b3"
  },
  "name": "排序算法",
  "content": "###  随便写10个排序吧 列出时间复杂度 和 在那个场景应该使用哪个\n```\nvar array = [1, 5, 6, 2 , 11, 3, 4, 8, 9, 15, 100, 20, 31, 256]\n```\n###  1.冒泡排序\n```\n// 最佳情况：T(n) = O(n)\n// 最差情况：T(n) = O(n2)\n// 平均情况：T(n) = O(n2)\nfunction bubbleSort(data, type) {\n   var arr = data ? data : []\n   var i = data.length -1\n   while (i > 0) {\n     var post = 0\n     for (var j = 0; j < i; j++) {\n       if (arr[j] > arr[j+1]) {\n         post = j\n         var t = arr[j]\n         arr[j] = arr[j+1]\n         arr[j+1] = t\n       }\n     }\n     i = post\n   }\n   arr =  type === 'max' ? arr.reverse() : arr\n   return arr\n}\n\n//console.log(bubbleSort(array, 'min'))\n//console.log(bubbleSort(array, 'max'))\n```\n### 2.选择排序\n```\n// 最佳情况：T(n) = O(n2)\n// 最差情况：T(n) = O(n2)\n// 平均情况：T(n) = O(n2)\nfunction chooseSort(data, type) {\n  var arr = data ? data : []\n  var l = arr.length\n  var minIndex, t\n  for (var i = 0; i < l - 1; i++) {\n    minIndex = i\n    for (var j = i + 1; j < l - 1; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j\n      }\n    }\n    t = arr[i]\n    arr[i] = arr[minIndex]\n    arr[minIndex] = t\n  }\n  arr =  type === 'max' ? arr.reverse() : arr\n  return arr\n}\n\n// console.log(chooseSort(array, 'min'))\n// console.log(chooseSort(array, 'max'))\n```\n\n###  3.插入排序\n```\n// 最佳情况：输入数组按升序排列。T(n) = O(n)\n// 最坏情况：输入数组按降序排列。T(n) = O(n2)\n// 平均情况：T(n) = O(n2)\nfunction insertSort(data, type) {\n  var arr = data ? data : []\n  for (var i = 1; i < arr.length; i ++) {\n    var key = arr[i]\n    var j = i - 1\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j]\n      j--\n    }\n    arr[j + 1] = key\n  }\n  arr =  type === 'max' ? arr.reverse() : arr\n  return arr\n}\n\n// console.log(insertSort(array, 'min'))\n// console.log(insertSort(array, 'max'))\n```\n\n### 4. 希尔排序\n##### 希尔排序又叫缩小增量排序\n##### [在线演示](http://jsbin.com/jilihecihe/edit?html,js,console)\n```\n// 最佳情况：T(n) = O(nlog2 n)\n// 最坏情况：T(n) = O(nlog2 n)\n// 平均情况：T(n) =O(nlog n)\n  function shellSort(data, type) {\n    let l = data.length\n    let temp = 0\n    let gap = 1\n    \n    // 动态定义间隔序列\n    while (gap < l / 5) {\n      gap = gap * 5 + 1\n    }\n    \n    for (gap; gap > 0; gap = Math.floor(gap / 5)) {\n      for (let i = gap; i < l; i++) {\n        temp = data[i]\n        for (var j = i - gap; j >=0 && data[j] > temp; j -= gap ) {\n          data[j + gap] = data[j]\n        }\n        data[j + gap] = temp\n      }\n    }\n    \n    data = type === 'max' ? data.reverse() : data\n    \n    return data\n  }\n  \n  console.log(shellSort(array, 'max'))\n  console.log(shellSort(array, 'min'))\n\n```\n\n### 5. 归并排序\n##### [在线演示](http://jsbin.com/nitozutuhu/1/edit)\n```\n  // 最佳情况：T(n) = O(n)\n  // 最差情况：T(n) = O(nlogn)\n  // 平均情况：T(n) = O(nlogn)\n  \n  // 和选择排序一样，归并排序的性能不受输入数据的影响，但比选择排序好的多\n  // 因为始终都是O(n log n）的时间复杂度。代价是需要额外的内存空间。\n  function mergeSort(data, type) {\n    var l = data.length\n    if (l <= 2) return data\n    var m = Math.floor(l / 2)\n    var left = data.slice(0, m)\n    var right = data.slice(m)\n    var res = merge(mergeSort(left, type), mergeSort(right, type))\n    res = type === 'max' ? res.reverse() : res\n    return res\n    \n  }\n  \n  function merge(left, right) {\n    var res = []\n    while (left.length && right.length) {\n      if (left[0] <= right[0]) {\n        res.push(left.shift())\n      } else {\n        res.push(right.shift())\n      }\n    }\n    \n    while (left.length) {\n      res.push(left.shift())\n    }\n    \n    while (right.length) {\n      res.push(right.shift())\n    }\n    \n    return res\n  }\n    \n  \n  console.log(mergeSort(array, 'min'))\n  console.log(mergeSort(array, 'max'))\n\n```\n\n### 6. 快速排序\n```\n // 最佳情况：T(n) = O(nlogn)\n // 最差情况：T(n) = O(n2)\n //平均情况：T(n) = O(nlogn)\nfunction quickSort (data, type) {\n  if (arr.length <= 1) {\n     return arr\n  }\n  var index = Math.floor(arr.length / 2)\n  var pivot = arr.splice(index, 1)[0]\n  var left = []\n  var right = []\n  for (var i = 0; i < arr.length; i++) {\n    if (type === 'min') {\n      arr[i] < pivot ? left.push(arr[i]) : right.push(arr[i])\n    } else {\n      arr[i] > pivot ? left.push(arr[i]) : right.push(arr[i])\n    }\n  }\n  return quickSort(left, type).concat([pivot], quickSort(right, type))\n}\n\nconsole.log(quickSort(array, 'min'))\nconsole.log(quickSort(array, 'max'))\n```\n\n### 7. 堆排序\n##### [在线演示](http://jsbin.com/lagevamita/3/edit?html,js,console)\n```\n\n```",
  "time": {
    "$date": "2017-09-26T18:04:49.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "590984701ae4cc44f28603b4"
  },
  "name": "express 允许跨域",
  "content": "```\napp.all('*', function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n    res.header(\"Access-Control-Allow-Methods\",\"PUT,POST,GET,DELETE,OPTIONS\");\n    res.header(\"X-Powered-By\",' 3.2.1')\n    res.header(\"Content-Type\", \"application/json;charset=utf-8\");\n    next();\n});\n```",
  "time": {
    "$date": "2017-04-24T15:18:48.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "590984811ae4cc44f28603b5"
  },
  "name": "mongoDb基本用法",
  "content": "```\ndb.c.find()\n```\n返回c文档里面的全部集合\n```\ndb.c.find({name:1, text: 1})\n```\n查询name为1 同时 text 也为1 的\nfind 第二个参数用于筛选返回集合\n```\ndb.c.find({name:1, text: 1}， {name: 1})\n```\n只返回name\n阻止返回 _id\n```\ndb.c.find({name:1, text: 1}， {name: 1, _id: 0})\n```\n1 代表返回  0 代表不返回\n```\n$lt  <\n$lte <=\n$gt  >\n$gte >=\n$ne  不等于 ！=\n```\n$in 查询指定条件 返回匹配到\n```\ndb.users.find({name: {$in: [1, 2]}})\n```\n查询name 值为 1 ， 2 的user\n```\n$nin \n```\n查询指定条件 返回不匹配的\n```\ndb.users.find({name: {$in: [1, 2]}})\n```\n查询name 值不为 1 ， 2 的user\n```\n$or\ndb.users.find({$or: [{name: {$in: [1, 2]}}, {test: 1}]})\n```\n匹配users name 为1 2  或者test为1\n\n$mod  \n查询的值除以第一个值 若余数等于第二个值 则返回\ndb.users.find({name: {$mod: [2, 1]}}})\n\n$not \n元条件句\n```\ndb.users.find({name: {$not: {$mod: [5, 1]}}})\n```\n返回与查询条件不符合的值\n\nnull\n想要查询值为null 同时需要判断值得存在\n```\ndb.admin.find({name: {$in: [null], $exists: true}})\n```",
  "time": {
    "$date": "2017-04-18T15:19:12.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "590984961ae4cc44f28603b6"
  },
  "name": "关于mongodb穿衣服安装的记录",
  "content": "### 第一步：先进入mongo创建用户和数据库\n```\n$ mongo\n\n> use fishy  // 创建fishy数据库\n\n> use admin   // 进入admin添加用户\n// 创建管理员（）\n> db.createUser({\n    user: \"admin\", \n    pwd: \"admin\",\n    roles: [\n        {\n            role: \"userAdminAnyDatabase\",\n            db: \"admin\"\n        }\n    ]\n})\n\n> db.auth(\"admin\", \"admin\")   // 测试是否能登录\n1    // 显示1就是登陆成功，显示0就登陆失败  \n> use fishy   // 进入fishy\n\n> db.createUser({user: \"fishy\", pwd: \"fishy\", roles:[{role: \"readWrite\", db: \"fishy\"}]})   // 添加普通用户\n\n// 就此用户就创建完了\n```\n### 第二步，重启mongodb，启动mongodb加上参数--auth即刻\n```\nmongod --dbpath \"E:\\mongodb\\data\" --logpath \"E:\\mongodb\\logs\\mongodb.log\"  --logappend --remove\n\nmongod --dbpath \"E:\\mongodb\\data\" --logpath \"E:\\mongodb\\logs\\mongodb.log\"  --logappend --auth --install\n```",
  "time": {
    "$date": "2017-04-21T15:19:28.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "590984ef1ae4cc44f28603b7"
  },
  "name": "正则匹配url query",
  "content": "### 关于url参数获取\n```\n  getQueryString(search, name) {\n    var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i')\n    var r = search.substr(1).match(reg)\n    if (r != null) {\n        return unescape(r[2])\n    }\n    return null\n  }\n```\n\n比如 ?page=1\n\ngetQueryString(url, page)\n\n就可以拿到page",
  "time": {
    "$date": "2017-05-03T15:20:13.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "5909fcc31ae4cc44f28603b8"
  },
  "name": "关于ngnix 的一些了解和使用",
  "content": "### ssl 证书的配置\n```\nhttps配置\nserver {\n        listen 443;\n        server_name www.domain.com; #填写绑定证书的域名\n        ssl on;\n        ssl_certificate 1_www.domain.com_bundle.crt;\n        ssl_certificate_key 2_www.domain.com.key;\n        ssl_session_timeout 5m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置\n        ssl_prefer_server_ciphers on;\n        location / {\n            root   html; #站点目录\n            index  index.html index.htm;\n        }\n}\n\nhttp 转发配置\nserver {\n    listen 80\n    server_name:   blog.xyxiao.cn;\n    return 301 https://$server_name$request_uri;\n}\n```\n###  路径配置\n```\n location / {\n     root  /home/blog/view/dist;\n     index index.html;\n }\n\nlocation /admin {\n    root  /home/blog/admin/build;\n    index  index.html;\n}\n\nlocation  /api/ {\n    proxy_pass http://127.0.0.1:8888/;\n}\n\n```\n### gzip压缩\n```\ngzip on;\ngzip_min_length 1k;\ngzip_buffers 4 16k;\n#gzip_http_version 1.0;\ngzip_comp_level 2;\ngzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\ngzip_vary off;\ngzip_disable \"MSIE [1-6]\\.\";\n```\n\n第1行：开启Gzip\n\n第2行：不压缩临界值，大于1K的才压缩，一般不用改\n\n第3行：buffer，就是，嗯，算了不解释了，不用改\n\n第4行：用了反向代理的话，末端通信是HTTP/1.0，有需求的应该也不用看我这科普文了；有这句的话注释了就行了，默认是HTTP/1.1\n\n第5行：压缩级别，1-10，数字越大压缩的越好，时间也越长，看心情随便改吧\n\n第6行：进行压缩的文件类型，缺啥补啥就行了，JavaScript有两种写法，最好都写上吧，总有人抱怨js文件没有压缩，其实多写一种格式就行了\n\n第7行：跟Squid等缓存服务有关，on的话会在Header里增加\"Vary: Accept-Encoding\"，我不需要这玩意，自己对照情况看着办吧\n\n第8行：IE6对Gzip不怎么友好，不给它Gzip了\n‘’‘’",
  "time": {
    "$date": "2017-05-03T23:41:14.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "590cb4350e2ff408367a7bd9"
  },
  "name": "Generator 函数的理解",
  "content": "#### 以前的异步编程的方法，大概有下面四种。\n1.  1.回调函数\n2.   2.事件监听\n3.  3.发布/订阅\n4.  4.Promise 对象\n\n## 一、什么是异步编程\n我现在想吃方便面， 又想看炉石直播， 怎么办， 倒水泡， 然后看直播， 等泡好了， 开始吃。\n\n这个泡面到吃面的过程, 等待的过程， 还可以做别的事情， 就是异步 \n\n**这种不连续的执行，就叫做异步**\n\n</br>\n\n## 二、回调函数\n\n什么是回调函数呢\n\n举个例子\n```\n$.get('/article', (response) => {\n  console.log('等待请求成功的回调函数')\n})\n\n```\n\n</br>\n\n## 三、promise\npromise 对象用于异步计算。一个 Promise 表示一个现在、将来或永不可能可用的值。\n\n一个 Promise有以下几种状态:\n* · pending: 初始状态，未履行或拒绝。\n* · fulfilled: 意味着操作成功完成。\n* · rejected: 意味着操作失败。\n\n```\nvar test = new Promise((resolve, reject) => {\n  // reslove 成功后执行的函数\n  // 做点什么事情之后\n  resolve()\n})\n\ntest.\nthen(() => {\n  console.log('reslove 方法')\n})\n.catch((err) => {\n  console.log(err);\n});\n```\nPromise 的写法只是回调函数的改进，使用then方法以后，异步任务的两段执行看得更清楚了\n\n</br>\n\n## 四、多线程\n意思是多个线程互相协作，完成异步任务。\n\n比如玩电脑\n\na 玩到10% 有事情去了， 暂停， 让b玩别的游戏\n\nb 玩了一段时间  a有空了， 回来了， 继续给a玩\n\n这样子就构成了多线程异步。\n\n</br>\n\n## 五、 generator 函数\n函数生成器function* 是一种可以从中退出并在之后重新进入的函数。生成器的环境（绑定的变量）会在每次执行后被保存，下次进入时可继续使用。\n调用一个生成器函数并不马上执行它的主体，而是返回一个这个生成器函数的迭代器（iterator）对象。当这个迭代器的next()方法被调用时，生成器函数的主体会被执行直至第一个yield表达式，该表达式定义了迭代器返回的值，或者，被 yield*委派至另一个生成器函数。next()方法返回一个对象，该对象有一个value属性，表示产出的值，和一个done属性，表示生成器是否已经产出了它最后的值。\n\n```\nfunction* go(){\n  var index = 0\n  while(index<3)\n    yield index++\n}\n\nvar gen = go()\n\nconsole.log(gen.next().value) // 0\nconsole.log(gen.next().value) // 1\nconsole.log(gen.next().value) // 2\nconsole.log(gen.next().value) // undefined\n```\n其实 yield就是表示每次next 要执行的方法 , next 执行遇到yield终止\n\n一个yield就表示可以执行一次next， 执行完yield 后不像下继续执行， 除非继续next\n\n如果超出 则执行失败 返回 undefined \n\nyield*  表示继续委派生产新的函数生成器， next会按照顺序， 一个一个执行。\n\n```\nfunction* gen(){\n  var url = 'https://api.github.com/users/github';\n  var result = yield fetch(url); // 这里表示第一次执行next后执行的方法\n  console.log(result); // 这里是第二次next\n}\n\nvar g = gen();\nvar result = g.next(); // 这里的next 会执行 fetch\n\nresult.value.then(function(data){\n  return data.json();\n}).then(function(data){\n  g.next(data); // 这里的执行console.log()\n});\n\n```\n这样子generator就实现了异步操作的管理\n</br>\n\n## 六、ES6 async\n这个属于新出的,  真正的异步函数\n\nasync function 声明了一个异步函数，并返回了一个 AsyncFunction 对象。\n\n调用异步函数时会返回一个 promise 对象。当这个异步函数返回一个值时，promise 的 resolve 方法将会处理这个返回值；当异步函数抛出的是异常或者非法值时，promise 的 reject 方法将处理这个异常值。\n\n异步函数可能会包括  await 表达式，这将会使异步函数暂停执行并等待 promise 解析传值后，继续执行异步函数并返回解析值。\n```\nvar num = (x)=> {\n  return new Promise(resolve => {\n    setTimeout(() => {\n       resolve(x)\n   }, 1000)\n })\n}\n\n\nasync function add1(x) {\n  var a = num(20)\n  var b = num(30)\n  console.log('等待中add1...')\n  return x + await a + await b\n}\n// 两个await 1s  后返回\n\nadd1(10).then(v => {\n  console.log(v)\n})\n\nasync function add2(x) {\n  var a = await num(10)\n  var b = await num(20)\n  console.log('等待中add2...')\n  return x + a + b\n}\n// 两个await 2s  后返回\n\nadd2(10).then(v => {\n  console.log(v)\n})\n\n\n\n```\n \n\n> 文章参考学习自阮一峰老师",
  "time": {
    "$date": "2017-05-06T01:11:44.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "59151d802a83c153b912cf27"
  },
  "name": "手动置顶",
  "content": "### 关于goodboy  \n#### [github](https://github.com/xyxiao001)\n#### [个人娱乐网站](https://xyxiao001.github.io/vue-blog)\n####  平时练手(按创建仓库时间排序):\n##### 基于vue1.0的图片网站\n[photo](http://xyxiao001.github.io/photo) \n##### 2016年学习ife练习\n[ife2016](https://xyxiao001.github.io/taskAll) \n##### 2016年学习写轮子\n[2016版本轮子库](https://xyxiao001.github.io/wheel) \n##### 基于vue的音乐播放器\n[vmusic](https://xyxiao001.github.io/vmusic)  \n##### 2017年学习ife练习\n[ife2017](https://xyxiao001.github.io/ife2017) \n##### 基于vue的图片浏览插件\n[viewPhoto](http://xyxiao.cn/viewPhoto/example/dist/) \n##### 基于vue的图片裁剪插件\n[vue-cropper](http://xyxiao.cn/vue-cropper/example)",
  "time": {
    "$date": "2018-07-30T10:26:38.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "5933e6fa45d8c553f28d39a4"
  },
  "name": "日常写插件 --- vue-cropper",
  "content": "## vue-crpopper\n### 一个优雅的图片裁剪插件\n [预览](http://xyxiao.cn/vue-cropper/example/)\n# vue-cropper\n####   安装 npm install vue-cropper\n####   使用  import VueCropper from vue-cropper\n```\n<vueCropper\n  ref=\"cropper\"\n  :img=\"option.img\"\n  :outputSize=\"option.size\"\n  :outputType=\"option.outputType\"\n></vueCropper>\n```\n<table style=\"text-align: center\">\n  <thead>\n    <tr>\n        <td>名称</td>\n        <td>功能</td>\n        <td>默认值</td>\n        <td>可选值</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td>img</td>\n        <td>裁剪图片的地址</td>\n        <td>空</td>\n        <td>url 地址 || base64 || blob</td>\n    </tr>\n    <tr>\n        <td>outputSize</td>\n        <td>裁剪生成图片的质量</td>\n        <td>1</td>\n        <td>0.1 - 1</td>\n    </tr>\n    <tr>\n        <td>outputType</td>\n        <td>裁剪生成图片的格式</td>\n        <td>jpg (jpg 需要传入jpeg)</td>\n        <td>jpeg || png || web</td>\n    </tr>\n  </tbody>\n</table>\n\n\n### 内置方法  通过this.$refs.cropper 调用\n##### this.$refs.cropper.startCrop()  开始截图\n##### this.$refs.cropper.stopCrop()  停止截图\n##### this.$refs.cropper.clearCrop()  清除截图\n##### this.$refs.cropper.getCropDate()  获取截图信息",
  "time": {
    "$date": "2017-06-04T18:52:05.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "59367a3f45d8c553f28d39ab"
  },
  "name": "算法- 从指定数随机生成数字的排列组合",
  "content": "```\n// 生成没有重复的自然数\nvar n = [0, 2, 1]\n\n// 生成的arr\nvar arr = []\n// 生成数字方法\nvar num = (n) => {\n  //首先排序\n  n = n .sort()\n  // 然后开始计算\n  create(n, 0, 1)\n  console.log(arr)\n  \n}\n\n// 递归方法\nvar create = (n, i, j) => {\n  // 从n 里面生成 第i个数开头  j位数的\n  if (j === 1) {\n    if (i < n.length) {\n      if (n[i] != 0) {\n        arr.push(n[i].toString())\n      }\n      create(n, i + 1, j)\n    } else {\n      create(n, i, j + 1)\n    }\n  } else if (j > 1 && j <= n.length) {\n    // 取到之前数组的比当前位数小一位数， 每个后面追加一位\n    var newArr = []\n     arr.forEach((item) => {\n      if (item.length === j - 1) {\n        newArr.push(item)\n      }\n    })\n    // 开始追加一个数\n     newArr.forEach((item) => {\n       // 追加为不同的情况的\n       for (x in n) {\n         // 判断item是否有这个数 没有添加\n         var add = true\n         var odd = item.split('')\n         odd.forEach((y) => {\n           if (y == n[x]) {\n             add = false\n           }\n         })\n         if (add) {\n           arr.push(item + n[x].toString())\n         }\n       }\n     })\n     create(n, i, j + 1)\n  }\n}\n\nnum(n)\n```",
  "time": {
    "$date": "2017-06-06T17:46:41.967+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "59367fd045d8c553f28d39ad"
  },
  "name": "你不知道的JavaScript学习（一）",
  "content": "## 作用域\n\n##### **LHS**   变量赋值所用到的查询， 一般出现在赋值语句的左边\n##### **RHS**   变量取值 所用到的查询 ， R 表示非左侧\n\nvar a = 2  ===>  在引擎里面 第一步 var a (LHS查询) 第二步 a = 2  (RHS查询)\n\n## 词法作用域\n词法作用域是引擎去解析代码， 基本和本身的作用域一样\n```\nfunction foo(a) {\n  var b = a * 2\n\n  function bar (c) {\n     console.log(a, b, c)\n  }\n  \n  bar(b * 3)\n}\n\nfoo (2)\n//  2,  4, 12\n```\n词法作用域意味着作用域是由写代码时函数申明的位置决定的",
  "time": {
    "$date": "2017-06-06T18:08:57.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "596384dd45d8c553f28d39c5"
  },
  "name": "十一长沙旅游计划",
  "content": "## 长沙旅游\n\n### 住宿\n\n黄兴路附近 --》  好吃的特别多\n\n### 行程\n\n10.1号  白天漫展 面基（不确定）\n\n\n### 吃的\n\n\n兔哥倾力推荐  客串出品 + 晚上烧烤  + 长沙都好吃\n\n地址： 定王台街道人民路与蔡锷路交汇往东100米都正街清香亭4号\n\n火锅，\n\n 阿杜打边炉（海鲜类），虾佬顶汤 都非常好吃\n\n**小龙坎火锅**\n五一大道497号(中天国际通讯广场对面)\n\n臭豆腐：比较有名的有：黄兴路旁五娭毑店，火宫殿、南门口。\n\n糖油粑粑：兴北路新大新斜对面的李公庙。\n\n葱油粑粑：最有名的是李娭毑葱油粑粑”。解放西路游击坪电线杆子旁。\n\n麻辣烫：不了锅，傣妹（步行街）小肥羊。以燕山街的麻辣烫最出名。而生意最火红的麻辣烫还在许多大学附近的小店，学院街对面的小古道巷与晏家塘横街街口有一叫娜姨麻辣烫\n\n口味虾：教育街花鸟市场那一块（顺丰楼）、南门口（四唉揭）湖大的堕落街、袁家岭的球宝大排档。汤做得好，顺丰楼号称鸡汁熬汤，但油腻有余，鲜香不够，四娭毑的味道猛，但辣得太尖锐，不及球宝淳厚。\n\n唆螺：很有名的唆螺一条街在黄兴中路，现因城市规划，黄兴中路正在修，不知唆螺街是否无恙。\n\n\n\n### 她喜欢的\n\n![eat](http://opq9z7jxu.bkt.clouddn.com/30.jpg)\n\n甜的， 辣的 ， 好吃的\n\n### 她不喜欢的\n\n![eat](http://opq9z7jxu.bkt.clouddn.com/26.jpg)\n内脏",
  "time": {
    "$date": "2017-07-10T21:44:25.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "5975986d45d8c553f28d39d9"
  },
  "name": "2017 下半年读书清单",
  "content": "## 技术\n#### 已读：\n###### javascript设计模式\n###### JavaScript权威指南(第6版)\n###### Node.js开发指南\n###### MongoDB权威指南\n\n#### 正在读：\n###### 你不知道的javascript上卷\n\n\n\n#### 想读：\n###### 你不知道的javascript下卷\n###### 深入理解ES6\n## 文学\n#### 已读：\n###### 解忧杂货铺（东野圭吾小说）\n\n#### 正在读：\n###### 我这一辈子 （老舍散文集）\n\n#### 想读：\n###### 摆渡人（克莱儿·麦克福尔）\n###### 望春风（格非）",
  "time": {
    "$date": "2017-07-24T14:47:08.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "59eec42b45d8c553f28d39ec"
  },
  "name": "reflect 和 proxy实现vue的数据绑定",
  "content": "[在线预览](http://jsbin.com/yutabeqose/edit?html,js,console,output)\n\n```\n\n\n// 每次操作data 重新渲染模板\nclass Vue {\n  constructor(data) {\n    var that = this\n    this.handel = {\n      get (target, key, receiver) {\n        return Reflect.get(target, key, receiver)\n      },\n      set (target, key, value, receiver) {\n        let result = Reflect.set(target, key, value, receiver)\n        that.render()\n        return result\n      }\n    }\n    this.el = data.el\n    this.data = new Proxy(data.data, this.handel)\n    // 渲染模板\n    this.getMode()\n    this.render()\n  }\n  \n  getMode () {\n    this.dom = document.querySelector(this.el)\n    this.template = this.dom.innerHTML\n  }\n  \n  render () {\n    var html = this.template\n    \n    var pattern = /\\{\\{(.*?)\\}\\}/g\n    var that = this\n    html.match(pattern).forEach(function (val) {\n      var s = val.substr(2, val.length - 4)\n      s = s.replace(/(^\\s*)|(\\s*$)/g, '')\n      var arrS = s.split('.')\n      var r = that.data\n      arrS.forEach(function (v) {\n        r = r[v]\n      })\n      html = html.replace(val, r)\n    })\n    this.dom.innerHTML = html\n  }\n}\n\n\nlet app = new Vue ({\n  el: '#app',\n  data: {\n    name: '小明',\n    sex: '男',\n    age: 22,\n    city: '厦门'\n  }\n})\n\nsetTimeout(() => app.data.name = '新的名字', 1000)\nsetTimeout(() => app.data.age = '25', 2000)\n\n```",
  "time": {
    "$date": "2017-10-24T12:38:38.349+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "59f6c1d545d8c553f28d39f1"
  },
  "name": "2017余下时间安排表",
  "content": "7:00  起床\n\n7:20 -8:00  锻炼\n\n8:00 - 8:30  背单词\n\n12:50 - 13：20  复习单词\n\n19:00 - 20：30  写插件 或者看技术书籍\n\n21:00 - 21:40  锻炼\n\n22:00 睡觉",
  "time": {
    "$date": "2017-10-10T16:42:05.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "5a372f6045d8c553f28d39fa"
  },
  "name": "她",
  "content": "喜欢黑色\n\n吃烤鱼配菜要多点\n\n鱼香肉丝",
  "time": {
    "$date": "2017-09-01T11:00:01.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "5a3a269945d8c553f28d39fc"
  },
  "name": "ts学习笔记",
  "content": "学习中..",
  "time": {
    "$date": "2017-12-20T16:26:08.220+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "5a4210bf45d8c553f28d3a00"
  },
  "name": "重庆三日游",
  "content": "## 作者： 好人龙\n### 12.29\n 04:34汉口站——11.56重庆北站\n\n 乘坐3号线往鱼洞方向（重庆北站南广场4口），五站路红旗河沟站下，站内换乘6号线往茶园方向，6站路小什站下，8号口出，步行至庆隆海客瀛洲c栋3208\n\n中午随意吃点，下午前往解放碑\n\n### 12.30\n  早上前往 山城步道（山城步道有很多条，风景最好的当属第三步道。怎么去呢？坐公交车或者坐地铁一号线到七星岗站一号出口，找到通远门老城墙（很明显）。\n\n公交车站旁边就是，地铁站则要往前走。通远门老城墙是市区保存较好的老城墙，比较小，可以上去看看，花不了几分钟，然后走到城墙的后面，也就是金汤街，顺着金汤街过领事巷、山城巷，最后走到山城步道的下出口，然后可以去坐较场口站的地铁。这是第一条线路，能看到很多老建筑，但看不到栈道，要看栈道的话是在山城巷靠近出口的时候有一条沿山的栈道，一直通往枇杷山后街。\n\n如果只想看栈道的话，就从七星岗地铁站2号出口出来，走枇杷山后街，然后走石板坡正街，，，看见监狱管理所右拐，，顺着一堵围墙就会看到栈道了，（是条小道别害怕）。然后顺着栈道就会进入山城巷了。）\n\n 下午前往长江索道（索道有两个站，新华路索道站和上新街索道站。\n一般游客都住在新华路这边，坐地铁1、6号线到小什字站下车，5A或5B出口都是新华路索道站。）\n\n 然后 南山一棵树观景台（看夜景，解放碑方向出发的话，建议坐长江索道过去到南岸那一头，下索道出马路往右走不远，顺着山上方向走一段路可以看到上新街公交站再坐公车到达山上四中站后，又往回沿马路走一段路，约10分钟就到；最建议的还是索道抵达后打车上山。）\n### 12.31\n四川美术学院  (黄角坪校区）\n\n 方所书店\n\n 磁器口（人满为患，商业化严重）\n\n 黄冠大扶梯（地铁1号线、轻轨3号线两路口站出来就是，先下去再上来，两次会有不一样的感觉。）\n\n  朝天门（看江景，坐地铁1号线到小什字下车，8出口；因施工通行不便，大部分地方都围上围板，要沿着长江边的一条小路（临时的）一直走，最后绕到朝天门广场，路途比较曲折。）",
  "time": {
    "$date": "2017-12-26T17:02:50.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "5a5439d845d8c553f28d3a0a"
  },
  "name": "算法练习-逆波兰符号计算",
  "content": "### 问题\nYour job is to create a calculator which evaluates expressions in Reverse Polish notation.\n\nFor example expression 5 1 2 + 4 * + 3 - (which is equivalent to 5 + ((1 + 2) * 4) - 3 in normal notation) should evaluate to 14.\n\nNote that for simplicity you may assume that there are always spaces between numbers and operations, e.g. 1 3 + expression is valid, but 1 3+ isn't.\n\nEmpty expression should evaluate to 0.\n\nValid operations are +, -, *, /.\n\n### 思路\n遇到数字进栈， 遇到符号出栈运算后进栈， 直到结束\n\n### 我的解答\n [预览](http://jsbin.com/gufejitivo/edit?html,js,console)\n```\nfunction calc (expr) {\n    // TODO: Your awesome code here\n    let arr = ['+', '-', '*', '/']\n    let find = (data) => {\n    return arr.findIndex((val, index) => {\n      return data === val\n    })\n  }\n    // 代表最后一位是符号 可以进行操作, \n    // 新生成一个栈， 遇到数字就进栈， 符号就出栈处理 之后进栈\n    let zhan = []\n    expr.split(' ').forEach((val, index) => {\n      if (!arr.includes(val)) {\n        // 数字进栈\n        zhan.push(Number(val))\n      } else {\n        // 符号 取出栈内最后两个数字进行处理\n         let num2 = zhan.pop()\n         let num1 = zhan.pop()\n         let sum = 0\n        switch (find(val)) {\n            case 0:\n              sum = num1 + num2\n              break\n            case 1:\n              sum = num1 - num2\n              break\n            case 2:\n              sum = num1 * num2\n              break\n            case 3:\n              sum = num1 / num2\n              break\n          }\n        zhan.push(sum)\n      }\n    })\n    return zhan.pop()\n}\n\nconsole.log(\ncalc('5 1 2 + 4 * + 3 -'),\ncalc('1 2 3'),\ncalc('1 2 3.5'),\ncalc(\"1 3 +\"),\ncalc('1 3 -'),\n)\n\n\n```\n\n### 大神解答\n```\nfunction calc (expr) {\n  return expr === '' ? 0 : expr.split(' ').reduce(function (stack, token) {\n    return (token.match(/\\d+/)) ? [parseFloat(token)].concat(stack) : [{\n      '+': function (b, a) { return a + b; },\n      '-': function (b, a) { return a - b; },\n      '*': function (b, a) { return a * b; },\n      '/': function (b, a) { return a / b; }\n    }[token].apply(null, stack)].concat(stack.slice(2));\n  }, [])[0];\n}\n```",
  "time": {
    "$date": "2018-01-09T11:38:07.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "5a546ec845d8c553f28d3a0c"
  },
  "name": "算法练习- 生成金字塔数字",
  "content": "### 问题\npascalsTriangle(4) == [1,1,1,1,2,1,1,3,3,1]\n\n\n\n### 我的解答\n [预览](http://jsbin.com/tudorewuja/1/edit?html,js,console)\n```\nfunction pascalsTriangle(n) {\n  // 金字塔数字\n  let arr = []\n  let f = (num, arrs) => {\n    arrs = arrs || []\n    let arr = []\n    arr.length = n - num + 1\n    arr.fill(1)\n    if (num >= 1) {\n      // 开始每层的数据替换\n      arr = arr.map((val, index) => {\n        if (index === 0 || index === arr.length - 1) {\n          return 1\n        } else {\n          return n - num > 0 ? arrs[n - num - 1][index - 1] + arrs[n - num - 1][index] : 1\n        }\n      })\n      arrs.push(arr)\n      return f(num - 1, arrs)\n    } else {\n      return arrs\n    }\n  }\n  return f(n).reduce((sum, val) => sum.concat(val))\n}\n\n//     1\n//   1   1\n//  1  2   1\nconsole.log(\n  pascalsTriangle(3),\n  pascalsTriangle(4),\n  pascalsTriangle(5)\n)\n\n\n\n```\n\n### 不用递归\n```\nfunction pascalsTriangle(n) {\n  var res = [1];\n  for(var i = 1; i < n; i++) {\n    var l = res.length;\n    res.push(1);\n    for(var j = l - i; j < l - 1; j++)\n      res.push(res[j] + res[j+1]);\n    res.push(1);\n  }\n  return res;\n}\n```",
  "time": {
    "$date": "2018-01-09T15:26:41.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "5a558c3145d8c553f28d3a0d"
  },
  "name": "算法练习 - 约瑟夫环",
  "content": "```\n\n// 约瑟夫环\n\n{\n  function josephus(items, k) {\n    //your code here\n    if (k === 1) {\n      return items\n    }\n    items = items.map((val) => {\n      return {\n        val: val,\n        kill: false\n      }\n    })\n    let arrs = []\n    let f = (items, num) => {\n      let n = num\n      items = items.map((val, index) => {\n        let v = val\n        if (n + 1 > k) {\n          n = 1\n          v.kill = true\n          arrs.push(v.val)\n        } else {\n          n = n + 1\n          v.kill = false\n        }\n        return v\n      })\n      if (items.length > 0) {\n        items = items.filter((val, index) => !val.kill)\n        f(items, n)\n      }\n      return arrs\n    }\n    return f(items, 1)\n  }\n\n  console.log(\n    josephus([1,2,3,4,5,6,7,8,9,10], 1),\n    josephus([1,2,3,4,5,6,7,8,9,10],2),\n    josephus([\"C\",\"o\",\"d\",\"e\",\"W\",\"a\",\"r\",\"s\"],4),\n    josephus([1,2,3,4,5,6,7],3),\n    josephus([],3)\n  )\n}\n\n{\n  // 大佬\n  function josephus(items,k){\n    var dest = [],\n        i = 0;\n\n    while (items.length > 0) {\n      dest.push(items.splice(i = (i + k - 1) % items.length, 1)[0]);\n    }\n\n    return dest;\n  }\n\n  console.log(\n    josephus([1,2,3,4,5,6,7,8,9,10], 1),\n    josephus([1,2,3,4,5,6,7,8,9,10],2),\n    josephus([\"C\",\"o\",\"d\",\"e\",\"W\",\"a\",\"r\",\"s\"],4),\n    josephus([1,2,3,4,5,6,7],3),\n    josephus([],3)\n  )\n}\n\n```",
  "time": {
    "$date": "2018-01-10T11:44:25.715+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "5a5c8f2845d8c553f28d3a11"
  },
  "name": "关于链表的学习-单链表",
  "content": "链表是一种物理存储单元上非线性、非连续性的数据结构\n\n  它在数据逻辑上是线性的 它的每个节点由两个域组成：数据域和指针域。数据域中存储实际数据，指针域则存储着指针信息，指向链表中的下一个元素或者上一个元素。正是由于指针的存在，链表的存储在物理单元是非连续性的。\n   \n  优势：可动态添加删除   大小可变 \n\n   劣势： 只能通过顺次指针访问，查询效率低\n\n####  单链表 \n头部指向尾部的单向链表\n\njs 实现代码\n[预览](http://jsbin.com/taboqicola/5/edit?html,js,console)\n```\n// 链表是一种非连续性的数据结构， 数据域中存储实际数据，指针域则存储着指针信息\n\n// 需要实现的方法\n// append(element) \t 向链表尾部添加结点element\n// insert(position,element)\t 向位置position处插入结点element\n// removeAt(position)\t 按照索引值position删除结点\n// remove(element)\t 搜索并删除给定结点element\n// remove() \t删除链表中最后一个结点\n// indexOf(element)\t查找并返回给定结点element的索引值\n// isEmpty() \t判断链表是否为空\n// size()\t 获取链表长度\n// toString()\t 转换为字符串输出\n// getHead()\t获取头结点\n// getTail() \t获取尾结点\n// js 单链表的实现\n\nclass linkedList {\n  constructor () {\n    // 存放链表内容\n    this.head = null // 头节点\n    this.length = 0  // 链表长度\n  }\n  \n  createNode (element) {\n    let node = {}\n    node.element = element\n    node.next = null // 下一个指向的节点\n    return node\n  }\n  \n  // 像链表尾部添加一个节点\n  append (element) {\n    let node = this.createNode(element)\n    let current = null\n    if (!this.head) {\n      this.head = node\n    } else {\n      current = this.head\n      // 从头部节点开始往下找 找到当前最后一个节点 设置最后一个节点的下一个是当前节点\n      while (current.next) {\n        current = current.next\n      }\n      \n      current.next = node\n    }\n    this.length += 1\n    return node\n  }\n   \n  // 像指定位置添加节点\n  insert (position, element) {\n    // 如果position在链表范围内则添加 否则返回false \n    if(position >= 0 && position <= this.length) {\n      // 从head开始往下面找\n      let node = this.createNode(element)\n      let pre = null\n      let current  = this.head\n      let index = 0\n      if (position === 0) {\n        node.next = current\n        this.head = node\n      } else {\n        while (index++ < position) {\n           pre = current\n           current = current.next\n        }\n        node.next = current\n        pre.next = node\n      }\n      this.length += 1\n      return node\n    } else {\n      console.error('链表下标错误')\n      return null\n    }\n  }\n  \n  // removeAt 移除链表指定节点\n  removeAt (position) {\n    if (position > -1 && position < this.length) {\n      let current = this.head\n      let pre = null\n      let index = 0\n      while (index++ < position) {\n        pre = current\n        current = current.next\n      }\n      pre.next = current.next\n      this.length -= 1\n    } else {\n      return null\n    }\n  }\n  \n  // remove 默认移出链表最后一个节点， 否则移出给定节点\n  remove (element) {\n    let current = this.head\n    let pre = null\n    \n    if (element) {\n      // 如果给了节点 则去查找对应节点然后删除\n      if (current === element) {\n        this.head = current.next\n        this.length -= 1\n        return true\n      }\n      pre = current\n      current = current.next\n      while (current) {\n        if (current === element) {\n          pre.next = current.next\n          this.length -= 1\n          return true\n        } else {\n          pre = current\n          current = current.next\n        }\n      }\n      return false\n    } else {\n      if (this.length < 1) {\n        return false\n      }\n      \n      if (this.length === 1) {\n        this.head = null\n        this.length -= 1\n        return true\n      }\n      \n      while (current.next !== null) {\n        pre = current\n        current = current.next\n      }\n      \n      pre.next = null\n      this.length -= 1\n      return true\n    }\n  }\n  \n  // indexOf 查找对应节点的索引\n  indexOf (element) {\n    let current = this.head\n    let index = 0\n    while (current && index < this.length) {\n      if (current === element) {\n        return index\n      } else {\n        index += 1\n        current = current.next\n      }\n    }\n    return -1\n  }\n  \n  // isEmpty() 判断链表是否为空\n  isEmpty () {\n    return this.length === 0\n  }\n  \n  size () {\n    return this.length\n  }\n  \n  getHead () {\n    return this.head\n  }\n  \n  getTail () {\n    let current = this.head\n    while (current.next) {\n      current = current.next\n    }\n    return current\n  }\n \n  toString () {\n    let current = this.head\n    let s = ''\n    let index = 0\n    while (current && index < this.length) {\n      s += current.element\n      current = current.next\n      index += 1\n    }\n    return s\n  }\n}\n\nlet l = new linkedList()\nl.append(1)\nl.append(2)\nl.append(4)\nl.insert(0, 0)\nl.insert(3, 3)\nl.removeAt(1)\nl.remove()\nlet add = l.append(5)\nl.remove(add)\nlet add2 = l.append(6)\nconsole.log(l.indexOf(add2))\nconsole.log(l)\nconsole.log(l.toString())\n```",
  "time": {
    "$date": "2018-01-15T19:22:49.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "5a5d9e8145d8c553f28d3a13"
  },
  "name": "关于链表的学习-单向循环链表",
  "content": "在单链表的基础上，将尾节点的指针指向头结点，就构成了一个循环链表。环形链表从任意一个节点开始，都可以遍历整个链表。",
  "time": {
    "$date": "2018-01-16T14:40:10.220+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "5a82fc1445d8c553f28d3a18"
  },
  "name": "2017年终总结",
  "content": "### 1. 情感\n2017一个多事的年份，发生了太多太多的事情，这一年，hzfe的清真， 南昌，夜喵都有了女朋友，其中里面最好看的丹丹呢， 已经结婚了，祝福🌹，而最丑的铲铲呢， 也有了自己的荷兰的男朋友\n不过令人开心的是，南昌和清真又都单身了。正所谓， 得之，我幸， 不得， 我命。如此而已。\n### 2.关于健身\n16年的暴饮暴食导致了17年初的160斤， 幡然醒悟是在高中同学过来杭州玩的\n那天， 晚上看到了他给我拍的照片， 惊到了😮，难受到爆炸，感觉当时自己明明才20出头， 却仿佛已经步入中年， 丝毫没有犹豫， 马上买了个\n瑜伽垫， 开始我的锻炼之旅， 刚刚开始总是幸苦的，不过眼看自己的肚子一点点瘪下去还是异常兴奋的，唯一的目标就是， 早睡早起， 加早日能够看到自己的八块腹肌（为了给秋何看）。18年的首要目标就是能够坚持。\n\n### 3.关于旅行\n每年和龙龙， 迪迪， 锦锦， 还有创创， 树苗， 佳伟的一次旅行， 17年1月的西塘， 杭州， 上海， 18年的重庆， 每当遇到困难的时候，就是因为每年固定的旅行， 让我对未来有了期望，真的是很幸运。18年计划和他们一起出国， 期待。\n\n### 4.team -> hzfe\n要是没有hzfe我也不知道我现在会是什么样子，正是因为有这样一群爱学习的小伙伴， 我才能不断的学习，虽然我是仅次于铲铲第二菜的人， 不过还是很难受，每次他们学习我都很难受， 可是都已经是今年最后三天了，他们还在学习。今年在一周年的时候成功见到了阿猫， 清真， 阿爆， 地瓜， 然后又很幸运的和夜喵还有微微\n一起吃了顿火锅， 希望在接下来的日子， 能够见到大家。\n\nps hzfe工资排行\n1.  1.南昌   40w不是钱之南昌\n2.  倒数第一 , 疯狂炒币的丹丹\n\n\n\n### 5. 学习方面呢 \n总是计划多过行动， 整个17年下来看过的书不到计划的三分之一，数据结构方面始终没有去深入的学习， 很难受\n\n##### 18年之必看书单\n\n数学之美， 数据结构，算法",
  "time": {
    "$date": "2018-02-13T22:52:37.000+0800"
  },
  "tags": [],
  "__v": 0
}, {
  "_id": {
    "$oid": "5acac78f45d8c553f28d3a2e"
  },
  "name": "算法练习初级版本",
  "content": "[链接](https://jsbin.com/suxasafike/edit?html,js,console,output)\n```\n// 欧几里得算法 最小公约数\nfunction gcd(p, q) {\n   if (q === 0) return p\n   var r = p % q\n   return gcd(q, r)\n}\n\nconsole.log(gcd(5, 2))\nconsole.log(gcd(4, 2))\nconsole.log(gcd(25, 5))\n```",
  "time": {
    "$date": "2018-04-09T09:52:20.000+0800"
  },
  "tags": [],
  "__v": 0
}]